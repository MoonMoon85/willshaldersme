{"ast":null,"code":"import _slicedToArray from\"/Users/home/Documents/dev/newsite/willshaldersme/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import FormStatus from\"./FormStatus\";import FormField from\"./FormField\";import SectionButton from\"./SectionButton\";function ContactForm(props){// State for input values\nvar _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),name=_useState2[0],setName=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),email=_useState4[0],setEmail=_useState4[1];var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),message=_useState6[0],setMessage=_useState6[1];// Whether to show errors\n// We set to true if they submit and there are errors.\n// We only show errors after they submit because\n// it's annoying to see errors while typing.\nvar _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),showErrors=_useState8[0],setShowErrors=_useState8[1];// Error array we'll populate\nvar errors=[];// Function for fetching error for a field\nvar getError=function getError(field){return errors.find(function(e){return e.field===field;});};// Function to see if field is empty\nvar isEmpty=function isEmpty(val){return val.trim()===\"\";};// Add error if email empty\nif(isEmpty(email)){errors.push({field:\"email\",message:\"Please enter an email\"});}// Add error if message empty\nif(isEmpty(message)){errors.push({field:\"message\",message:\"Please enter a message\"});}// Add error if name shown and empty\nif(props.showNameField){if(isEmpty(name)){errors.push({field:\"name\",message:\"Please enter your name\"});}}// Handle form submission\nvar handleSubmit=function handleSubmit(e){// If field errors then show them\nif(errors.length){setShowErrors(true);}else{// Otherwise call onSubmit with form data\nif(props.onSubmit){props.onSubmit({name:name,email:email,message:message});}}};return React.createElement(React.Fragment,null,props.status&&props.status.message&&React.createElement(FormStatus,{type:props.status.type,message:props.status.message}),React.createElement(\"form\",{name:\"contact\",method:\"POST\",\"data-netlify\":\"true\",onSubmit:function onSubmit(e){e.preventDefault();handleSubmit();}},React.createElement(\"div\",{className:\"field is-horizontal\"},React.createElement(\"div\",{className:\"field-body\"},props.showNameField&&React.createElement(FormField,{value:name,type:\"text\",placeholder:\"Name\",error:showErrors&&getError(\"name\"),onChange:function onChange(value){return setName(value);}}),React.createElement(FormField,{value:email,type:\"email\",placeholder:\"Email\",error:showErrors&&getError(\"email\"),onChange:function onChange(value){return setEmail(value);}}))),React.createElement(\"div\",{className:\"field is-horizontal\"},React.createElement(\"div\",{className:\"field-body\"},React.createElement(FormField,{value:message,type:\"textarea\",placeholder:\"Message\",error:showErrors&&getError(\"message\"),onChange:function onChange(value){return setMessage(value);}}))),React.createElement(\"div\",{className:\"field is-horizontal\"},React.createElement(\"div\",{className:\"field-body\"},React.createElement(\"div\",{className:\"field\"},React.createElement(\"div\",{className:\"control\"},React.createElement(\"button\",{type:\"submit\"},\"Send\")))))));}export default ContactForm;","map":{"version":3,"sources":["/Users/home/Documents/dev/newsite/willshaldersme/src/components/ContactForm.js"],"names":["React","useState","FormStatus","FormField","SectionButton","ContactForm","props","name","setName","email","setEmail","message","setMessage","showErrors","setShowErrors","errors","getError","field","find","e","isEmpty","val","trim","push","showNameField","handleSubmit","length","onSubmit","status","type","preventDefault","value"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport FormStatus from \"./FormStatus\";\nimport FormField from \"./FormField\";\nimport SectionButton from \"./SectionButton\";\n\nfunction ContactForm(props) {\n  // State for input values\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n\n  // Whether to show errors\n  // We set to true if they submit and there are errors.\n  // We only show errors after they submit because\n  // it's annoying to see errors while typing.\n  const [showErrors, setShowErrors] = useState(false);\n\n  // Error array we'll populate\n  let errors = [];\n\n  // Function for fetching error for a field\n  const getError = field => {\n    return errors.find(e => e.field === field);\n  };\n\n  // Function to see if field is empty\n  const isEmpty = val => val.trim() === \"\";\n\n  // Add error if email empty\n  if (isEmpty(email)) {\n    errors.push({\n      field: \"email\",\n      message: \"Please enter an email\"\n    });\n  }\n\n  // Add error if message empty\n  if (isEmpty(message)) {\n    errors.push({\n      field: \"message\",\n      message: \"Please enter a message\"\n    });\n  }\n\n  // Add error if name shown and empty\n  if (props.showNameField) {\n    if (isEmpty(name)) {\n      errors.push({\n        field: \"name\",\n        message: \"Please enter your name\"\n      });\n    }\n  }\n\n  // Handle form submission\n  const handleSubmit = e => {\n    // If field errors then show them\n    if (errors.length) {\n      setShowErrors(true);\n    } else {\n      // Otherwise call onSubmit with form data\n      if (props.onSubmit) {\n        props.onSubmit({\n          name,\n          email,\n          message\n        });\n      }\n    }\n  };\n\n  return (\n    <>\n      {props.status && props.status.message && (\n        <FormStatus type={props.status.type} message={props.status.message} />\n      )}\n\n      <form name=\"contact\" method=\"POST\" data-netlify=\"true\"\n        onSubmit={e => {\n          e.preventDefault();\n          handleSubmit();\n        }}\n      >\n        <div className=\"field is-horizontal\">\n          <div className=\"field-body\">\n            {props.showNameField && (\n              <FormField\n                value={name}\n                type=\"text\"\n                placeholder=\"Name\"\n                error={showErrors && getError(\"name\")}\n                onChange={value => setName(value)}\n              />\n            )}\n\n            <FormField\n              value={email}\n              type=\"email\"\n              placeholder=\"Email\"\n              error={showErrors && getError(\"email\")}\n              onChange={value => setEmail(value)}\n            />\n          </div>\n        </div>\n        <div className=\"field is-horizontal\">\n          <div className=\"field-body\">\n            <FormField\n              value={message}\n              type=\"textarea\"\n              placeholder=\"Message\"\n              error={showErrors && getError(\"message\")}\n              onChange={value => setMessage(value)}\n            />\n          </div>\n        </div>\n        <div className=\"field is-horizontal\">\n          <div className=\"field-body\">\n            <div className=\"field\">\n              <div className=\"control\">\n                <button type=\"submit\">Send</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </form>\n    </>\n  );\n}\n\nexport default ContactForm;\n"]},"metadata":{},"sourceType":"module"}