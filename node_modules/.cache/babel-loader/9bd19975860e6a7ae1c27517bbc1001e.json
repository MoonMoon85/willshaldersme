{"ast":null,"code":"// This optional code is used to register a service worker.\n// register() is not called by default.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\nvar isLocalhost=Boolean(window.location.hostname==='localhost'||// [::1] is the IPv6 localhost address.\nwindow.location.hostname==='[::1]'||// 127.0.0.1/8 is considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));export function register(config){if(process.env.NODE_ENV==='production'&&'serviceWorker'in navigator){// The URL constructor is available in all browsers that support SW.\nvar publicUrl=new URL(process.env.PUBLIC_URL,window.location.href);if(publicUrl.origin!==window.location.origin){// Our service worker won't work if PUBLIC_URL is on a different origin\n// from what our page is served on. This might happen if a CDN is used to\n// serve assets; see https://github.com/facebook/create-react-app/issues/2374\nreturn;}window.addEventListener('load',function(){var swUrl=\"\".concat(process.env.PUBLIC_URL,\"/service-worker.js\");if(isLocalhost){// This is running on localhost. Let's check if a service worker still exists or not.\ncheckValidServiceWorker(swUrl,config);// Add some additional logging to localhost, pointing developers to the\n// service worker/PWA documentation.\nnavigator.serviceWorker.ready.then(function(){console.log('This web app is being served cache-first by a service '+'worker. To learn more, visit https://bit.ly/CRA-PWA');});}else{// Is not localhost. Just register service worker\nregisterValidSW(swUrl,config);}});}}function registerValidSW(swUrl,config){navigator.serviceWorker.register(swUrl).then(function(registration){registration.onupdatefound=function(){var installingWorker=registration.installing;if(installingWorker==null){return;}installingWorker.onstatechange=function(){if(installingWorker.state==='installed'){if(navigator.serviceWorker.controller){// At this point, the updated precached content has been fetched,\n// but the previous service worker will still serve the older\n// content until all client tabs are closed.\nconsole.log('New content is available and will be used when all '+'tabs for this page are closed. See https://bit.ly/CRA-PWA.');// Execute callback\nif(config&&config.onUpdate){config.onUpdate(registration);}}else{// At this point, everything has been precached.\n// It's the perfect time to display a\n// \"Content is cached for offline use.\" message.\nconsole.log('Content is cached for offline use.');// Execute callback\nif(config&&config.onSuccess){config.onSuccess(registration);}}}};};})[\"catch\"](function(error){console.error('Error during service worker registration:',error);});}function checkValidServiceWorker(swUrl,config){// Check if the service worker can be found. If it can't reload the page.\nfetch(swUrl).then(function(response){// Ensure service worker exists, and that we really are getting a JS file.\nvar contentType=response.headers.get('content-type');if(response.status===404||contentType!=null&&contentType.indexOf('javascript')===-1){// No service worker found. Probably a different app. Reload the page.\nnavigator.serviceWorker.ready.then(function(registration){registration.unregister().then(function(){window.location.reload();});});}else{// Service worker found. Proceed as normal.\nregisterValidSW(swUrl,config);}})[\"catch\"](function(){console.log('No internet connection found. App is running in offline mode.');});}export function unregister(){if('serviceWorker'in navigator){navigator.serviceWorker.ready.then(function(registration){registration.unregister();});}}","map":{"version":3,"sources":["/Users/home/Documents/dev/newsite/willshaldersme/src/serviceWorker.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","swUrl","concat","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","fetch","response","contentType","headers","get","status","indexOf","unregister","reload"],"mappings":"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","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\nvar isLocalhost = Boolean(window.location.hostname === 'localhost' || // [::1] is the IPv6 localhost address.\nwindow.location.hostname === '[::1]' || // 127.0.0.1/8 is considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    var publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', function () {\n      var swUrl = \"\".concat(process.env.PUBLIC_URL, \"/service-worker.js\");\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config); // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n\n        navigator.serviceWorker.ready.then(function () {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(function (registration) {\n    registration.onupdatefound = function () {\n      var installingWorker = registration.installing;\n\n      if (installingWorker == null) {\n        return;\n      }\n\n      installingWorker.onstatechange = function () {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the updated precached content has been fetched,\n            // but the previous service worker will still serve the older\n            // content until all client tabs are closed.\n            console.log('New content is available and will be used when all ' + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'); // Execute callback\n\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log('Content is cached for offline use.'); // Execute callback\n\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  })[\"catch\"](function (error) {\n    console.error('Error during service worker registration:', error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl).then(function (response) {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    var contentType = response.headers.get('content-type');\n\n    if (response.status === 404 || contentType != null && contentType.indexOf('javascript') === -1) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(function (registration) {\n        registration.unregister().then(function () {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  })[\"catch\"](function () {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(function (registration) {\n      registration.unregister();\n    });\n  }\n}"]},"metadata":{},"sourceType":"module"}