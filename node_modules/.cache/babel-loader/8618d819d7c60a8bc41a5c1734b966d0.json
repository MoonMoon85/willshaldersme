{"ast":null,"code":"import _slicedToArray from\"/Users/home/Documents/dev/newsite/willshaldersme/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect,useContext,createContext}from\"react\";import queryString from\"query-string\";import fakeAuth from\"fake-auth\";/*\n    Handles authentication with fakeAuth, a library for prototyping ...\n    ... auth flows without need for a backend (everything is stored locally).\n\n    [CHANGING AUTH SERVICES]: You can switch to another auth service ...\n    ... like firebase, auth0, etc, by modifying the useProvideAuth() ...\n    ... function below. Simply swap out the fakeAuth.function() calls for the ...\n    ... correct ones for your given auth service.\n  */var authContext=createContext();// Provider component that wraps your app and makes auth object ...\n// ... available to any child component that calls useAuth().\nexport function ProvideAuth(_ref){var children=_ref.children;var auth=useProvideAuth();return React.createElement(authContext.Provider,{value:auth},children);}// Hook for child components to get the auth object ...\n// ... update when it changes.\nexport var useAuth=function useAuth(){return useContext(authContext);};// Provider hook that creates auth object and handles state\nfunction useProvideAuth(){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),user=_useState2[0],setUser=_useState2[1];var signin=function signin(email,password){return fakeAuth.signin(email,password).then(function(user){setUser(user);return user;});};var signup=function signup(email,password){return fakeAuth.signup(email,password).then(function(user){setUser(user);return user;});};var signout=function signout(){return fakeAuth.signout().then(function(){setUser(false);});};var sendPasswordResetEmail=function sendPasswordResetEmail(email){return fakeAuth.sendPasswordResetEmail(email);};var confirmPasswordReset=function confirmPasswordReset(password,code){// If no reset code passed in then fetch it automatically from current url.\n// [CHANGING AUTH SERVICES]: If not passing in the code as the second ...\n// ... arg above then make sure getFromQueryString() below has the ...\n// ... correct url parameter name (it might not be \"code\").\nvar resetCode=code||getFromQueryString(\"code\");return fakeAuth.confirmPasswordReset(password,resetCode);};// Subscribe to user on mount\n// [CHANGING AUTH SERVICES]: Not all auth services have a subscription ...\n// ... function so depending on your service you may need to remove  ...\n// ... this effect and use the commented out one below.\nuseEffect(function(){var unsubscribe=fakeAuth.onChange(function(user){setUser(user);});// Call unsubscribe on cleanup\nreturn function(){return unsubscribe();};},[]);// Fetch user on mount\n// [CHANGING AUTH SERVICES]: If your auth service doesn't have a subscribe ...\n// ... function then use this effect instead of the one above and modify ...\n// ... to work with your chosen auth service.\n/*\n    useEffect(() => {\n      yourAuthService.getUser().then(user => {\n        setUser(user);\n      });\n    }, []);\n    */return{user:user,signin:signin,signup:signup,signout:signout,sendPasswordResetEmail:sendPasswordResetEmail,confirmPasswordReset:confirmPasswordReset};}var getFromQueryString=function getFromQueryString(key){return queryString.parse(window.location.search)[key];};","map":{"version":3,"sources":["/Users/home/Documents/dev/newsite/willshaldersme/src/util/auth.js"],"names":["React","useState","useEffect","useContext","createContext","queryString","fakeAuth","authContext","ProvideAuth","children","auth","useProvideAuth","useAuth","user","setUser","signin","email","password","then","signup","signout","sendPasswordResetEmail","confirmPasswordReset","code","resetCode","getFromQueryString","unsubscribe","onChange","key","parse","window","location","search"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext, createContext } from \"react\";\nimport queryString from \"query-string\";\nimport fakeAuth from \"fake-auth\";\n\n/*\n    Handles authentication with fakeAuth, a library for prototyping ...\n    ... auth flows without need for a backend (everything is stored locally).\n\n    [CHANGING AUTH SERVICES]: You can switch to another auth service ...\n    ... like firebase, auth0, etc, by modifying the useProvideAuth() ...\n    ... function below. Simply swap out the fakeAuth.function() calls for the ...\n    ... correct ones for your given auth service.\n  */\n\nconst authContext = createContext();\n\n// Provider component that wraps your app and makes auth object ...\n// ... available to any child component that calls useAuth().\nexport function ProvideAuth({ children }) {\n  const auth = useProvideAuth();\n  return <authContext.Provider value={auth}>{children}</authContext.Provider>;\n}\n\n// Hook for child components to get the auth object ...\n// ... update when it changes.\nexport const useAuth = () => {\n  return useContext(authContext);\n};\n\n// Provider hook that creates auth object and handles state\nfunction useProvideAuth() {\n  const [user, setUser] = useState(null);\n\n  const signin = (email, password) => {\n    return fakeAuth.signin(email, password).then(user => {\n      setUser(user);\n      return user;\n    });\n  };\n\n  const signup = (email, password) => {\n    return fakeAuth.signup(email, password).then(user => {\n      setUser(user);\n      return user;\n    });\n  };\n\n  const signout = () => {\n    return fakeAuth.signout().then(() => {\n      setUser(false);\n    });\n  };\n\n  const sendPasswordResetEmail = email => {\n    return fakeAuth.sendPasswordResetEmail(email);\n  };\n\n  const confirmPasswordReset = (password, code) => {\n    // If no reset code passed in then fetch it automatically from current url.\n    // [CHANGING AUTH SERVICES]: If not passing in the code as the second ...\n    // ... arg above then make sure getFromQueryString() below has the ...\n    // ... correct url parameter name (it might not be \"code\").\n    const resetCode = code || getFromQueryString(\"code\");\n    return fakeAuth.confirmPasswordReset(password, resetCode);\n  };\n\n  // Subscribe to user on mount\n  // [CHANGING AUTH SERVICES]: Not all auth services have a subscription ...\n  // ... function so depending on your service you may need to remove  ...\n  // ... this effect and use the commented out one below.\n  useEffect(() => {\n    const unsubscribe = fakeAuth.onChange(user => {\n      setUser(user);\n    });\n\n    // Call unsubscribe on cleanup\n    return () => unsubscribe();\n  }, []);\n\n  // Fetch user on mount\n  // [CHANGING AUTH SERVICES]: If your auth service doesn't have a subscribe ...\n  // ... function then use this effect instead of the one above and modify ...\n  // ... to work with your chosen auth service.\n  /*\n    useEffect(() => {\n      yourAuthService.getUser().then(user => {\n        setUser(user);\n      });\n    }, []);\n    */\n\n  return {\n    user,\n    signin,\n    signup,\n    signout,\n    sendPasswordResetEmail,\n    confirmPasswordReset\n  };\n}\n\nconst getFromQueryString = key => {\n  return queryString.parse(window.location.search)[key];\n};\n"]},"metadata":{},"sourceType":"module"}