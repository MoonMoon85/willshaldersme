{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["// Delay to mimic slower network requests\nconst RESPONSE_DELAY = 200;\n// Function to generate random user token\nconst generateToken = () => String(Math.floor(Math.random() * 10000));\n\nexport default {\n  onChangeCallback: null,\n\n  signin: function(email, password) {\n    return getAuthByEmail(email).then(auth => {\n      // If user found then check password\n      if (auth) {\n        // If password match singin user otherwise throw error\n        if (auth.user.password === password) {\n          this.changeAuthToken(auth.token);\n          return auth.user;\n        } else {\n          throw new CustomError(\"auth/wrong-password\", \"Password is wrong\");\n        }\n      } else {\n        // If user not found then throw error\n        throw new CustomError(\n          \"auth/user-not-found\",\n          \"Email does not have an account\"\n        );\n      }\n    });\n  },\n\n  signup: function(email, password) {\n    return getAuthByEmail(email).then(auth => {\n      // Throw error if email is already in use\n      if (auth) {\n        throw new CustomError(\n          \"auth/email-already-in-use\",\n          \"Email is already in use\"\n        );\n      }\n\n      // Create auth object\n      const newAuth = { token: generateToken(), user: { email, password } };\n      // Store auth object and signin user\n      return addAuth(newAuth).then(() => {\n        this.changeAuthToken(newAuth.token);\n        return newAuth.user;\n      });\n    });\n  },\n\n  signout: async function() {\n    // Signout user\n    this.changeAuthToken(null);\n    return Promise.resolve();\n  },\n\n  onChange: function(cb) {\n    // Store callback function so we can also call within ...\n    // ... setAuthToken(). Necessary because storage event listener ...\n    // ... only fires when local storage is changed by another tab.\n    this.onChangeCallback = cb;\n\n    const handleTokenChange = token => {\n      getAuth(token).then(auth => {\n        this.onChangeCallback(auth ? auth.user : false);\n      });\n    };\n\n    const listener = window.addEventListener(\n      \"storage\",\n      ({ key, newValue }) => {\n        if (key === \"auth-token\") {\n          handleTokenChange(JSON.parse(newValue));\n        }\n      },\n      false\n    );\n\n    const authToken = storeGet(\"auth-token\");\n    handleTokenChange(authToken);\n\n    // Return an unsubscribe function so consumer ...\n    // ... can unsubscribe when needed.\n    return () => {\n      window.removeEventListener(\"storage\", listener);\n    };\n  },\n\n  sendPasswordResetEmail: function(email) {\n    // Get the user token for the email address and use as password reset code.\n    // A real auth service would do this server-side and email ...\n    // ... the code to the provided email address.\n    // For testing we save the reset code to local storage and ...\n    // ... read in subsequent confirmPasswordReset() call.\n    return getAuthByEmail(email).then(auth => {\n      if (auth) {\n        storeSet(\"auth-pass-reset-code\", auth.token);\n        console.log(\"Your one-time use password reset code:\", auth.token);\n        throw new CustomError(\n          \"auth/cannot-send-email\",\n          `You're using Fake Auth, which cannot send password reset emails. These emails normally contain a link to your site with a special reset code. But worry not! Fake Auth has stored the reset code locally in your browser so you can simply go to your change password page now and choose a new password. This enables you to fully test your password reset flow and error states without involving emails.`\n        );\n      } else {\n        throw new CustomError(\n          \"auth/user-not-found\",\n          \"Email does not have an account\"\n        );\n      }\n    });\n  },\n\n  confirmPasswordReset: function(password, code) {\n    let resetCode;\n    // If code was passed in\n    if (code) {\n      resetCode = code;\n    } else {\n      // Otherwise grab the code from local storage\n      resetCode = storeGet(\"auth-pass-reset-code\");\n      // Remove code from storage so it's one-time use.\n      storeRemove(\"auth-pass-reset-code\");\n    }\n\n    return updateAuth(resetCode, { password }).then(response => {\n      if (response) {\n        return true;\n      } else {\n        throw new CustomError(\n          \"auth/invalid-action-code\",\n          \"Invalid password update code\"\n        );\n      }\n    });\n  },\n\n  // Updates auth token in storage and calls onChangeCallback()\n  changeAuthToken: function(authToken) {\n    storeSet(\"auth-token\", authToken);\n    // If we have an onChangeCallback (set in this.onChange)\n    if (this.onChangeCallback) {\n      // Fetch user via token and pass to callback\n      getAuth(authToken).then(auth => {\n        this.onChangeCallback(auth ? auth.user : false);\n      });\n    }\n  }\n};\n\n/***** LOCAL DB *****/\n\nconst _getAll = () => storeGet(\"auth-db\", []);\nconst _setAll = db => storeSet(\"auth-db\", db);\n\nconst getAuth = token => {\n  return delay(() => _getAll().find(item => item.token === token));\n};\n\nconst getAuthByEmail = email => {\n  return delay(() => _getAll().find(item => item.user.email === email));\n};\n\nconst addAuth = auth => {\n  return delay(() => {\n    const all = _getAll();\n    all.push(auth);\n    _setAll(all);\n  });\n};\n\nconst updateAuth = (token, userData = {}) => {\n  return delay(() => {\n    const all = _getAll();\n    const index = all.findIndex(item => item.token === token);\n\n    if (index !== -1) {\n      all[index].user = {\n        ...all[index].user,\n        ...userData\n      };\n      _setAll(all);\n      return true;\n    } else {\n      return false;\n    }\n  });\n};\n\n// Initialize db with some data if client-side\nif (typeof window !== \"undefined\" && _getAll().length === 0) {\n  _setAll([\n    {\n      user: {\n        email: \"demo@gmail.com\",\n        pass: \"demo\"\n      },\n      token: \"12345\"\n    }\n  ]);\n}\n\n/***** HELPERS *****/\n\nfunction storeGet(key, defaultValue = null) {\n  const value = window.localStorage.getItem(key);\n  return value ? JSON.parse(value) : defaultValue;\n}\n\nfunction storeSet(key, value) {\n  window.localStorage.setItem(key, JSON.stringify(value));\n}\n\nfunction storeRemove(key) {\n  window.localStorage.removeItem(key);\n}\n\nconst delay = cb => {\n  return new Promise(resolve =>\n    setTimeout(() => {\n      resolve(cb());\n    }, RESPONSE_DELAY)\n  );\n};\n\nfunction CustomError(code, message) {\n  const error = new Error(message);\n  error.code = code;\n  return error;\n}\n\nCustomError.prototype = Object.create(Error.prototype);\n"],"names":["onChangeCallback","signin","email","password","getAuthByEmail","then","auth","user","_this","changeAuthToken","token","CustomError","signup","newAuth","String","Math","floor","random","addAuth","_this2","signout","this","Promise","resolve","onChange","cb","handleTokenChange","getAuth","_this5","listener","window","addEventListener","key","JSON","parse","newValue","authToken","storeGet","removeEventListener","sendPasswordResetEmail","storeSet","console","log","confirmPasswordReset","code","resetCode","localStorage","removeItem","updateAuth","response","_this6","_getAll","_setAll","db","delay","find","item","all","push","userData","index","findIndex","defaultValue","value","getItem","setItem","stringify","length","pass","setTimeout","message","error","Error","prototype","Object","create"],"mappings":"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"}